/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        reverseList(l1);
        reverseList(l2);
        ListNode* l3 = addListNode(l1, l2);
        reverseList(l3);
        return l3;
    }
    ListNode* addListNode(ListNode* l1, ListNode* l2){
        ListNode* l3 = new ListNode();
        ListNode* curr = l3;
        int carry = 0;
        while(l1 != nullptr || l2 != nullptr || carry != 0){
            int l1_val = l1 != nullptr ? l1->val : 0;
            int l2_val = l2 != nullptr ? l2->val : 0;
            int sum = l1_val + l2_val + carry;
            carry = sum / 10;
            ListNode* sumNode = new ListNode(sum % 10, nullptr);
            curr->next = sumNode;
            l1 = l1 != nullptr ? l1->next : nullptr;
            l2 = l2 != nullptr ? l2->next : nullptr;
            curr = curr->next;
        }
        return l3->next;
    }    
    void reverseList(ListNode*& List){
        ListNode* pre = nullptr;
        ListNode* curr = List;
        while(curr != nullptr){
            ListNode* temp = curr->next;
            curr->next = pre;
            pre = curr;
            curr = temp;
        }
        List = pre;
    }
};
