class Solution {
public:
    std::vector<std::vector<int>> insert
        (std::vector<std::vector<int>>& intervals, std::vector<int>& newInterval) {
        int leftIndex = 0;
        int n = intervals.size();
        int rightIndex = n;
        
        //二分查找，左闭右开。寻找大于newInterval的第一个数字vector的索引，并在该位置插入。
        while (leftIndex < rightIndex) {
            int mid = (leftIndex + rightIndex) / 2;
            if (newInterval[0] > intervals[mid][0]) {
                leftIndex = mid + 1;
            }
            else if (newInterval[0] <= intervals[mid][0]) {
                rightIndex = mid;
            }

        }
        intervals.insert(leftIndex + intervals.begin(), newInterval);

        std::vector<std::vector<int>> ans;
        for (int i = 0; i <= n; i++) {
            //如果ans的末尾vector的第二个数字小于intervals的第i个vector的第一个数字，那么插入vector到ans中，如果ans的末尾vector的第二个数字小于在intervals的第i个vector的第二个数字，那么选取最大值当作ans的末尾vector的第二个数字。否则略过intervals的第i个vector。
            if (ans.empty() || ans.back()[1] < intervals[i][0]) {
                ans.push_back(intervals[i]);
            } else if (ans.back()[1] >= intervals[i][0]) {
                ans.back()[1] = std::max(ans.back()[1], intervals[i][1]);
            }
        }

        return ans;
    }
};
