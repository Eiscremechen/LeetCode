class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0;
        int right = n - 1;
        while(left <= right){
            int mid = (left + right) / 2;
            if(target == nums[mid]){
                return mid;
            }
            //left - mid为有序区间,
            if(nums[left] < nums[mid]){
                //有序区间的二分查找
                //target在有序区间
                if(nums[left] <= target && target < nums[mid]){
                    right = mid - 1;
                } 
                //target在无序区间
                else{
                    left = mid + 1;
                }
                
            } 
            //mid - right为有序区间
            else{
                //有序区间的二分查找
                //target在有序区间
                if(nums[mid] < target && target <= nums[right]){
                    left = mid + 1;
                } 
                //target在无序区间
                else{
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
};
