/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    //寻找链表中间节点
    ListNode* middleNode(ListNode* head){
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast != nullptr && fast->next != nullptr){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    //反转链表
    ListNode* reverseNode(ListNode* head){
        ListNode* pre = nullptr;
        ListNode* curr = head;
        while(curr != nullptr){
            ListNode* temp = curr->next;
            curr->next = pre;
            pre = curr;
            curr = temp;
        }
        return pre;
    }
    //合并两个链表
    void mergeList(ListNode* l1, ListNode* l2){
        ListNode* temp_1;
        ListNode* temp_2;
        while(l1 != nullptr && l2 != nullptr){
            temp_1 = l1->next;
            temp_2 = l2->next;

            l1->next = l2;
            l1 = temp_1;

            l2->next = l1;
            l2 = temp_2;
        }
    }
    
    void reorderList(ListNode* head) {
        ListNode* middle = middleNode(head);
        ListNode* l1 = head;    
        ListNode* l2 = middle->next;
        middle->next = nullptr;    
        l2 = reverseNode(l2);
        mergeList(l1, l2);
    }
};
