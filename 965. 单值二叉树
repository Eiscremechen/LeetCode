/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isUnivalTree(const TreeNode* root) {
        return DFS(root, root->val);
    }
private:
    bool DFS(const TreeNode* root,const int val){
        if(root == nullptr){
            return true;
        }
        if(root->val != val){
            return false;
        }
        return DFS(root->left, root->val) && DFS(root->right, root->val);
    }
};


or


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int val;
public:
    bool isUnivalTree(TreeNode* root) {
        if(root == nullptr){
            return true;
        } else{
            val = root->val;
        }
        return visit(root->left) && visit(root->right); 
    }
    bool visit(TreeNode* root){
        if(root == nullptr){
            return true;
        }
        if(root->val != val){
            return false;            
        }
        return visit(root->left) && visit(root->right); 
    }
};
