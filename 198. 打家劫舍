class Solution {
public:
    int rob(vector<int>& nums) {
        //dp[i]是偷前i个房子情况下最大金额。(0, 1, …, i-1)
        //方案1: 偷前i-1个房子，最后一个不偷(num[i-1]不偷)。
        //方案2: 偷前i-2个房子，最后一个偷(num[i-1]偷)。
        //选择较大方案: 即 f(i) = max(f(i - 1), nums[i - 1] + f(i - 2))
        //i = 0 f(0) = 0; i = 1 f(1) = nums[0];
        
        int n = nums.size();
        std::vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = nums[0];
        for(int i = 2; i <= n; i++){
            dp[i] = max(dp[i - 2] + nums[i - 1], dp[i - 1]);
        }
        return dp[n];
    }
};
