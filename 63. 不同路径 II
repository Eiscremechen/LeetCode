class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        std::vector<std::vector<int>> dp(m, std::vector<int>(n));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    dp[i][j] = 0;
                } else{
                    if(i != 0 && j != 0){
                        dp[i][j] = dp[i][j - 1]+ dp[i - 1][j];
                    }
                    if(i == 0 && j != 0){ 
                        dp[i][j] = dp[i][j - 1];
                    }
                    if(i != 0 && j == 0){
                        dp[i][j] = dp[i - 1][j];
                    }
                    if(i == 0 && j == 0){
                        dp[i][j] = 1;
                    }
                }
            }
        }
        return dp[m - 1][n -1];
    }
};
