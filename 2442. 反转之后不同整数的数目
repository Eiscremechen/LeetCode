class Solution {
private:
    int palindromeNumber(int a){
        int b = 0;
        while(a != 0){
            b= a % 10 + b * 10;
            a /= 10;
        }
        return b;

    }
public:
    int countDistinctIntegers(vector<int>& nums) {
        int n = nums.size();
        //std::set只允许保存不同变量，如果插入的key已经在set里出现，那么则不插入。
        std::set<int> res;
        for(int i = 0; i < n; i++){
            res.insert(nums[i]);
            res.insert(palindromeNumber(nums[i]));
        }
        return res.size();
    }
};


or


class Solution {
public:
    int countDistinctIntegers(vector<int>& nums) {
        int n = nums.size();
        int res = 0;
        for(int i = 0; i < n; i++){
            int temp_num = nums[i];
            int num = 0;
            while(temp_num != 0){
                num = temp_num % 10 + num * 10;
                temp_num /= 10;
            }
            nums.push_back(num);
        }
        std::unordered_map<int, int> HashTable;
        for(int i : nums){
            if(HashTable.find(i) != HashTable.end()){
                HashTable[i]++;
            } else{
                HashTable[i] = 1;
            }
        }
        return HashTable.size();
    }
};
