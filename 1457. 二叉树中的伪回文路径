/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pseudoPalindromicPaths (TreeNode* root) {
        this->res = 0;
        this->nums = std::vector<int>(10, 0);
        visit(root);
        return res;
    }
private:
    std::vector<int> nums;
    int res;
    void visit(TreeNode* root){
        if(root == nullptr){
            return ;
        }
        nums[root->val]++;
        if(root->left != nullptr){
            visit(root->left);
        }
        if(root->right != nullptr){
            visit(root->right);
        }
        if(root->left == nullptr && root->right == nullptr){
            isPseudo(nums);
        }

        nums[root->val]--;
    }
    void isPseudo(const std::vector<int>& nums){
        int odd = 0;
        for(int i = 0; i <= 9; i++){
            if(nums[i] % 2 != 0){
                odd++;
            }
        }
        if(odd > 1){
            
        } else{
            this->res++;
        }
    }
};
