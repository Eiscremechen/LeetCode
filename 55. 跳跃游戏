class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        //dp[i]代表dp[i - 1]跳一格后, 剩下的步数 与 nums[i]的最大值.
        //dp[i] = max(dp[i] - 1, nums[i]);
        std::vector<int> dp(n, 0);
        dp[0] = nums[0];
        for(int i = 1; i < n; i++){
            if(dp[i - 1] == 0){
                return false;
            }
            dp[i] = max(dp[i - 1] - 1, nums[i]);
        }
        return true;
    }
};


or


class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        //dp[i]代表dp[i - 1]跳一格后, 剩下的步数 与 nums[i]的最大值.
        //dp[i] = max(dp[i] - 1, nums[i]);
        int a = nums[0];
        for(int i = 1; i < n; i++){
            if(a == 0){
                return false;
            }
            a = max(a - 1, nums[i]);
        }
        return true;
    }
};
