class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 1){
            return nums[0];
        }

        std::vector<int> dp_1(n + 1, 0);
        std::vector<int> dp_2(n + 1, 0);
        //第一间偷
        //最后一间肯定不偷
        dp_1[0] = 0;
        dp_1[1] = nums[0];
        for(int i = 2; i <= n - 1; i++){
            dp_1[i] = max(dp_1[i - 1], dp_1[i - 2] + nums[i - 1]);
        }
        //最后一间肯定不偷
        dp_1[n] = max(dp_1[n - 1], dp_1[n - 2] + 0);

        //第一间不偷
        dp_2[0] = 0;
        dp_2[1] = 0;
        for(int i = 2; i <= n; i++){
            dp_2[i] = max(dp_2[i - 1], dp_2[i - 2] + nums[i - 1]);
        }
        return max(dp_1[n], dp_2[n]);
    }
};
